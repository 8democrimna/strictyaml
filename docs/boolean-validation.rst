Boolean validation
------------------

Boolean values can be parsed using a Bool
validator. It case-insensitively interprets
"yes", "true", "1", "on" as True and their
opposites as False.

Any values that are not one of those will
will cause a validation error.



invalid_sequence.yaml:

.. code-block:: yaml
  a: yÃ¢s

valid_sequence.yaml:

.. code-block:: yaml
  a: yes
  b: true
  c: on
  d: 1
  e: 0
  f: Off
  g: FALSE
  h: no

.. code-block:: python

    from strictyaml import Bool, Str, MapPattern, YAMLValidationError, load
    
    schema = MapPattern(Str(), Bool())

Even though it returns a YAML object, that YAML object resolves to True/False

.. code-block:: python

    load(valid_sequence, schema)["e"] == False
    >>> True

Using .value you can get the actual boolean value parsed

.. code-block:: python

    load(valid_sequence, schema)["a"].value is True
    >>> True

Whereas using .text you can get the text

.. code-block:: python

    load(valid_sequence, schema)["g"].text == "FALSE"
    >>> True

The YAML boolean object cannot be cast directly to string since
the expected value is ambiguous ("False" or "FALSE"?)


.. code-block:: python

    str(load(valid_sequence, schema)["g"])
    >>> EXCEPTION RAISED:
      Cannot cast



.. code-block:: python

    load(invalid_sequence, schema)
    >>> EXCEPTION RAISED:
      when expecting a boolean value (one of "yes", "true", "on", "1", "no", "false", "off", "0")
      found non-boolean
        in "<unicode string>", line 1, column 1:
          a: "y\xE2s"
           ^ (line: 1)


Page automatically generated by hitchdoc from:
  hitch/boolean.story