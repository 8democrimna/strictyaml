# First pass at something resembling a readme generator

vars:
  title: StrictYAML
  url: http://hitchdev.com/strictyaml
  intro: |
    StrictYAML is a [type-safe](https://en.wikipedia.org/wiki/Type_safety) YAML parser
    that parses a
    [restricted subset](strictyaml/features-removed)
    of the [YAML](strictyaml/what-is-yaml) specificaton.

    Priorities:

    - Readability of the YAML.
    - Ease of use of API.
    - Secure by default, strict validation of markup and straightforward type casting.
    - Clear, readable exceptions with code snippets and line numbers.
    - Acting as a near-drop in replacement for pyyaml, ruamel.yaml or poyo.
    - Ability to read in (commented) YAML and write it out again with comments preserved.
    - *Not* speed, currently, although if writing optimized C is your thing, please help.
template: |
  ---
  title: {{ title }}
  type: index
  weight: 0
  ---
  
  {{ intro }}
  
  {% for story in quickstart %}
  {{ story.documentation(template="readme") }}
  {% endfor %}
  
  Install It
  ----------

  ``` {.sourceCode .sh}

    $ pip install strictyaml
  ```
  
  
  Why StrictYAML?
  ---------------
  
  There are several other markup/config languages which can do similar things to
  StrictYAML as well as approaches. I have researched most of the popular ones and
  tried to give a reasoned justification for why this one works better:
  
  {% for link in why_not -%}
  - [{{ link['name'] }}](why-not/{{ link['slug'] }})
  {% endfor %}
  
  
  Design justifications
  ---------------------
  
  There are some design decisions in StrictYAML which are controversial
  and/or not obvious. Those are documented here:
  
  {% for link in why -%}
  - [{{ link['name'] }}](why/{{ link['slug'] }})
  {% endfor %}
  
  Breaking changes
  ----------------

  0.5: Data is now parsed by default as a YAML object instead of directly to dict/list. To get dict/list and ordinary values as before, get yaml_object.data.

  Contributors
  ------------

  - @gvx
  - @AlexandreDecan
  - @lots0logs
  - @tobbez

