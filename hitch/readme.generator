# First pass at something resembling a readme generator

vars:
  url: http://hitchdev.com/strictyaml
template: |
  ---
  title: StrictYAML
  type: project
  ---

  StrictYAML is a [type-safe](https://en.wikipedia.org/wiki/Type_safety) YAML parser
  that parses a [restricted subset](features-removed) of the [YAML](what-is-yaml)
  specificaton.

  Priorities:

  - Beautiful API
  - Refusing to parse [the ugly and hard to read features in YAML](features-removed).
  - Secure by default, strict validation of markup and straightforward type casting.
  - Clear, readable exceptions with code snippets and line numbers.
  - Acting as a near-drop in replacement for pyyaml, ruamel.yaml or poyo.
  - Ability to read in YAML, make changes and write it out again with comments preserved.
  - *Not* speed, currently, although if writing optimized C is your thing, please help.
  
  {% for story in quickstart %}
  {{ story.documentation(template="readme") }}
  {% endfor %}
  
  Install
  -------

  ```sh
  $ pip install strictyaml
  ```
  
  Why StrictYAML?
  ---------------
  
  Honestly I'd feel embarrassed pushing something like this out without doing a lot
  of boring and detailed research on the alternatives. Here it is:
  
  {% for link in why_not -%}
  - [{{ link['name'] }}](why-not/{{ link['slug'] }})
  {% endfor %}
  
  
  Using StrictYAML
  ----------------

  {% for link in using -%}
  - [{{ link['name'] }}]({{ link['slug'] }})
  {% endfor %}
  
  
  Design justifications
  ---------------------
  
  There are some design decisions in StrictYAML which are controversial
  and/or not obvious. Those are documented here:
  
  {% for link in why -%}
  - [{{ link['name'] }}](why/{{ link['slug'] }})
  {% endfor %}
  
  Breaking changes
  ----------------

  0.5: Data is now parsed by default as a YAML object instead of directly to dict/list. To get dict/list and ordinary values as before, get yaml_object.data.

  Contributors
  ------------

  - @gvx
  - @AlexandreDecan
  - @lots0logs
  - @tobbez

