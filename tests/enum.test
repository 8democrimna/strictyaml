{% for python_version in python_versions %}
- name: Enum validation
  preconditions:
    python_version: {{ python_version }}
    files:
      valid_sequence_1.yaml: |
        a: A
      valid_sequence_2.yaml: |
        a: B
      valid_sequence_3.yaml: |
        a: C
      invalid_sequence_1.yaml: |
        a: D
      invalid_sequence_2.yaml: |
        a: yes
      invalid_sequence_3.yaml: |
        a: 1
  tags:
    - sequence
    - py{{ python_version }}
  scenario:
    - Run command: |
        from strictyaml import Map, Enum, MapPattern, YAMLValidationError, load

        schema = Map({"a": Enum(["A", "B", "C"])})

        try:
            load(invalid_sequence_1, schema)
        except YAMLValidationError as error:
            seq1_error = error

        try:
            load(invalid_sequence_2, schema)
        except YAMLValidationError as error:
            seq2_error = error

        try:
            load(invalid_sequence_3, schema)
        except YAMLValidationError as error:
            seq3_error = error
    - Assert True: 'load(valid_sequence_1, schema) == {"a": "A"}'
    - Assert True: 'load(valid_sequence_2, schema) == {"a": "B"}'
    - Assert True: 'load(valid_sequence_3, schema) == {"a": "C"}'
    - Assert True: seq1_error.start_line == 1
    - Assert True: seq1_error.end_line == 1
    - Assert True: seq2_error.start_line == 1
    - Assert True: seq2_error.end_line == 1
    - Assert True: seq3_error.start_line == 1
    - Assert True: seq3_error.end_line == 1
{% endfor %}