{% for ruamel_version in ruamel_versions %}
{% for python_version in python_versions %}
- name: Sequence validation
  preconditions:
    python_version: {{ python_version }}
    ruamel version: {{ ruamel_version }}
    files:
      valid_sequence.yaml: |
        - 1
        - 2
        - 3
      invalid_sequence_1.yaml: |
        a: 1
        b: 2
        c: 3
      invalid_sequence_2.yaml: |
        - 2
        - 3
        - a:
          - 1
          - 2
      invalid_sequence_3.yaml: |
        - 1.1
        - 1.2
      invalid_sequence_4.yaml: |
        - 1
        - 2
        - 3.4
  tags:
    - sequence
    - py{{ python_version }}
  scenario:
    - Run command: |
        from strictyaml import Seq, Str, Int, YAMLValidationError, load
        from __future__ import print_function

        assert 'load(valid_sequence, Seq(Str())) == ["1", "2", "3", ]'

        try:
            load(invalid_sequence_1, Seq(Str()))
        except YAMLValidationError as error:
            print(error)
            assert error.start_line == 1 
            assert error.end_line == 3

    - Run command: |
        try:
            load(invalid_sequence_2, Seq(Str()))
        except YAMLValidationError as error:
            print(error)
            assert error.start_line == 3
            assert error.end_line == 5

    - Run command: |
        try:
            load(invalid_sequence_3, Seq(Int()))
        except YAMLValidationError as error:
            print(error)
            assert error.start_line == 1
            assert error.end_line == 1

    - Run command: |
        try:
            load(invalid_sequence_4, Seq(Int()))
        except YAMLValidationError as error:
            print(error)
            assert error.start_line == 3
            assert error.end_line == 3
{% endfor %}
{% endfor %}