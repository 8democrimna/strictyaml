{% for python_version in python_versions %}
- name: Sequence pattern validation
  preconditions:
    python_version: {{ python_version }}
    files:
      valid_sequence.yaml: |
        - A
        - B
        - C
      invalid_sequence_1.yaml: |
        - A
        - B
        - B
      invalid_sequence_2.yaml: |
        - 3
        - 3
        - 3
  tags:
    - sequence
    - py{{ python_version }}
  scenario:
    - Run command: |
        from strictyaml import UniqueSeq, Str, YAMLValidationError, load

        schema = UniqueSeq(Str())

        try:
            load(invalid_sequence_1, schema)
        except YAMLValidationError as error:
            seq1_error = error


        try:
            load(invalid_sequence_2, schema)
        except YAMLValidationError as error:
            seq2_error = error

    - Assert True: 'load(valid_sequence, schema) == ["A", "B", "C", ]'
    - Assert True: seq1_error.start_line == 1
    - Assert True: seq1_error.end_line == 3
    - Assert True: seq2_error.start_line == 1
    - Assert True: seq2_error.end_line == 3
{% endfor %}